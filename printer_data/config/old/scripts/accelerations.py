#
# Acceleration control post processing script for gcode generated by SuperSlicer.
#
# Allows to specify separate acceleration, acceleration-to-deceleration and square-corner-velocity values for:
# * print moves for all types of features
# * travel moves
# * all moves done on the first layer (as a global override)
#
#
# To configure SuperSlicer to automatically run this script against all GCode files that it generates, do the following:
#
# * grab a (portable) copy of Python3 if you don't have it already. 
#   for Windows that would be the "embeddable package" from https://www.python.org/downloads/windows/
#   extract the package somewhere on your hard drive, for example to: C:\python-3.10.0\
#
# * copy this file somewhere on your hard drive. there is no need to edit anything in it.
#   for example into the (manually created) 'scripts' folder inside the Python package you extracted earlier:
#   C:\python-3.10.0\scripts\accelerations.py
#
# * in SuperSlicer, add the following entry to: Print Settings > Output Options > Post Processing Scripts:
#   C:\python-3.10.0\python.exe C:\python-3.10.0\scripts\accelerations.py
#   path to python.exe and the accelerations.py script depends on where you put them both.
#
# * if you have previosly done acceleration control via the custom code in "between extrusion role change" gcode section 
#   in Printer Settings > Custom GCode, remove it from there. this post processing script does all the acceleration
#   injection code necessary.
#  
# * disable advanced acceleration control (set all values to 0) in the Print Settings > Speed section.
#
# * in Superslicer, add the following block of settings that this script will make use of somewhere to your
#   Printer Settings > Custom GCode > Start GCode section, for example below your PRINT_START macro call
#   NOTE: remove the "#" symbol and the space after it from the start of each setting line below. they all should
#   start with the ";" as the first symbol
#
#   Adjust the acceleration numbers as needed. Current values are taken from Stephan's PIF profile.
#
# ;
# ; Settings for the post-processing script "accelerations.py" that go into the Start GCode section in SuperSlicer.
# ; Accelerations are specified in the ACCEL / ACCEL_TO_DECEL / SQUARE_CORNER_VELOCITY format.
# ; 
# ; ACCEL: 4000/2000/8    for First Layer
# ; ACCEL: 15000/15000/8   for Travel
# ; ACCEL: 2000/1000/8     for TYPE:External perimeter
# ; ACCEL: 2000/1000/8     for TYPE:Overhang perimeter
# ; ACCEL: 2500/1750/8     for TYPE:Internal perimeter
# ; ACCEL: 2500/1750/8     for TYPE:Top solid infill
# ; ACCEL: 4000/2000/8     for TYPE:Solid infill
# ; ACCEL: 6000/3000/10    for TYPE:Internal infill
# ; ACCEL: 5000/2500/8     for TYPE:Bridge infill
# ; ACCEL: 4000/2000/8     for TYPE:Internal bridge infill
# ; ACCEL: 4000/2000/8     for TYPE:Thin wall
# ; ACCEL: 2000/1000/8     for TYPE:Gap fill
# ; ACCEL: 4000/2000/8     for TYPE:Skirt
# ; ACCEL: 6000/3000/8     for TYPE:Support material
# ; ACCEL: 6000/3000/8     for TYPE:Support material interface
# ;
#
# Implementation details
#   SuperSlicer prefixes blocks of print moves with the comment like: ;TYPE:Internal perimeter
#   This type is what selects the acceleration to use from the config block for all following print moves,
#   until a different TYPE comment changes it to something else.
#   Travel moves are wrapped in a pair of calls that first set travel accels, and then restore the accels
#   of the current block of print moves.
#   First layer accel setting overrides accelerations for all print and travel moves done on the first layer.
# 
# @author VintageGriffin
# @version 1.1
#
import sys, re, time

class ContinueToNextLineException(Exception):
    pass

#
# read settings first
#

# default values to use if not specified in the config
gcode_accel_features = {
    'First Layer': 'SET_VELOCITY_LIMIT ACCEL=2000 ACCEL_TO_DECEL=1000 SQUARE_CORNER_VELOCITY=5',
    'Travel'     : 'SET_VELOCITY_LIMIT ACCEL=4000 ACCEL_TO_DECEL=2000 SQUARE_CORNER_VELOCITY=5'
}
feature_beancounters = {
    'First Layer': 0,
    'Travel'     : 0
}

settings_end_at_line = 0
stop_settings_scan_after_lines = 3


accel_gcode = ''
curr_file_line = lines_after_last_setting = 0
setting_regex = re.compile(r'\s*;\s*ACCEL\s*:\s*(?P<accel>\d+)\s*[/\\]\s*(?P<accel_to_decel>\d+)\s*[/\\]\s*(?P<square_corner_velocity>\d+)\s+for\s+(?P<type>.+)')
with open(sys.argv[1], 'r') as gcode:
    for line in gcode:
        curr_file_line += 1
        setting = setting_regex.match(line)
        if setting:
            accel_gcode  = 'SET_VELOCITY_LIMIT ACCEL=' + setting.group('accel') + ' ACCEL_TO_DECEL=' + setting.group('accel_to_decel') + ' SQUARE_CORNER_VELOCITY=' + setting.group('square_corner_velocity')
            feature_type = setting.group('type').strip()
            gcode_accel_features[feature_type] = accel_gcode
            feature_beancounters[feature_type] = 0
        else:
            if accel_gcode:  # we already found the settings block
                lines_after_last_setting += 1
                if lines_after_last_setting > stop_settings_scan_after_lines:  # stop scanning for settings after this amount of lines after the last one
                    break
                    
settings_end_at_line = curr_file_line - stop_settings_scan_after_lines
feature_types = [feature_type for feature_type in gcode_accel_features if feature_type not in ['First Layer', 'Travel']]


#
# process gcode file
#
output = []
curr_line = 0

#
curr_feature_type = None
last_injected_accel = ''
print_regex  = re.compile(r'G1\s+X[\d.]+\s+Y[\d.]+\s+E[\d.]+\s*(;|$)')
travel_regex = re.compile(r'G1\s+X[\d.]+\s+Y[\d.]+(?P<has_feedrate>\s+F[\d.]+)?\s*(;|$)')
layer_num = 0

with open(sys.argv[1], 'r') as gcode:
    for line in gcode:
        curr_line += 1
        
        # don't start processing the file until after the config section
        if curr_line < settings_end_at_line:  
            output.append(line)
            continue
            
        #
        # count layers
        # inject first layer accel
        #
        if line.startswith(';LAYER_CHANGE'):
            layer_num += 1
            output.append(line)
            if layer_num == 1:
                output.append(gcode_accel_features['First Layer'] + ' ; ' + 'First Layer' + "\n")
                feature_beancounters['First Layer'] += 1
            continue

        # do not do any acceleration injection for the first layer
        if layer_num == 1:
            output.append(line)
            continue
        
        #
        # handle feature printing sections
        # figure out what feature type are we currently printing
        # all non-travel accels within the section will be for that specific feature
        #
        try:
            for feature_type in feature_types:
                if line.strip() == ';' + feature_type:
                    curr_feature_type = feature_type
                    output.append(line)  # append original line
                    output.append(gcode_accel_features[curr_feature_type] + ' ; ' + curr_feature_type + "\n")
                    
                    feature_beancounters[curr_feature_type] += 1
                    last_injected_accel = 'print'
                        
                    raise ContinueToNextLineException
        except ContinueToNextLineException:
            continue
    
        #
        # handle travel moves
        #
        if travel_regex.match(line):
            # beginning of the block of travel moves
            if last_injected_accel != 'travel':
                output.append(gcode_accel_features['Travel'] + ' ; Travel' + "\n")
                feature_beancounters['Travel'] += 1
                last_injected_accel = 'travel'

            output.append(line)
            continue
            #
        elif last_injected_accel == 'travel' and curr_feature_type:  # avoid error on first ever travel
            # end of the block of travel moves
            output.append(gcode_accel_features[curr_feature_type] + ' ; ' + curr_feature_type + "\n")
        
            feature_beancounters[curr_feature_type] += 1
            last_injected_accel = 'print'
            # do not continue to next line, process further

        #
        # for all other lines
        #
        output.append(line)  # append original line
        
        
#        
# overwrite original file
#
curr_output_line = 0
with open(sys.argv[1], 'w') as f:
    for line in output:
        curr_output_line += 1
        f.write(line)
        
        if curr_output_line == settings_end_at_line:  # append some debug information
            f.write(";\n")
            f.write("; Processing results.\n");
            f.write(";\n")
            
            f.write("; Parsed acceleration values: \n");
            for type, gcode in gcode_accel_features.items():
                f.write(';  ' + type.ljust(35) + gcode.replace('SET_VELOCITY_LIMIT ', '') + "\n")
                
            f.write(";\n")
            f.write("; Number of acceleration control insertions: \n")
            for type, num in feature_beancounters.items():
                f.write(';  ' + type.ljust(35) + str(num) + "\n")
            f.write(";\n")
                
        
